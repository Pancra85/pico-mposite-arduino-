// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// cvideo_sync //
// ----------- //

#define cvideo_sync_wrap_target 0
#define cvideo_sync_wrap 7

static const uint16_t cvideo_sync_program_instructions[] = {
            //     .wrap_target
    0x6f30, //  0: out    x, 16                  [15]
    0x0024, //  1: jmp    !x, 4                      
    0xae01, //  2: mov    pins, x                [14]
    0x0f00, //  3: jmp    0                      [15]
    0xde04, //  4: irq    nowait 4               [30]
    0x6f30, //  5: out    x, 16                  [15]
    0xaf42, //  6: nop                           [15]
    0x0f25, //  7: jmp    !x, 5                  [15]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program cvideo_sync_program = {
    .instructions = cvideo_sync_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config cvideo_sync_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + cvideo_sync_wrap_target, offset + cvideo_sync_wrap);
    return c;
}

//
// Initialise the PIO
// Parameters:
// - pio: The PIO to attach this to
// - sm: The state machine number
// - offset: The instruction memory offset the program is loaded at
// - pin_base: The number of the first GPIO pin to use in the PIO
// - pin_count: The number of consecutive GPIO pins to write to
// - freq: The frequency of the PIO state machine
// 
void cvideo_sync_initialise_pio(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, double freq) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);
    pio_sm_config c = cvideo_sync_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    sm_config_set_out_shift(&c, false, true, 8);
    pio_sm_init(pio, sm, offset, &c);
    pio->sm[sm].clkdiv = (uint32_t) (freq * (1 << 16));
}

#endif
